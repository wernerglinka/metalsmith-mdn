{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import path from 'path';\nimport nunjucks from 'nunjucks';\n\n/**\n * @typedef Options\n * @property {String} templatesDir - Directory containing nunjucks templates\n * @property {String} customFilters - Path to custom nunjucks filters file\n */\n\nconst MARKER_START = '{#mdn';\nconst MARKER_END = '#}';\n\n/** @type {Options} */\nconst defaults = {\n  templatesDir: 'layouts',\n  customFilters: 'nunjucks-filters.js'\n};\n\n/**\n * Normalize plugin options\n * @param {Options} [options]\n * @returns {Object}\n */\nconst normalizeOptions = ( options ) => {\n  return { ...defaults, ...( options || {} ) };\n};\n\n/**\n * Extract MDN tags from file content\n * @param {object} fileObj - Metalsmith file object\n * @param {Function} debugFn - Debug function from metalsmith\n * @returns {Array} Array of MDN tag objects\n * @description\n *     Extracts all MDN tags from the file content to construct the mdnTagsArray.\n *     Get the name of the MDN component and find the component properties in the\n *     files frontmatter. Push the component properties to mdnTagsArray and when done\n *     return mdnTagsArray.\n */\nfunction getMDNTags( fileObj, debugFn ) {\n  const mdnTagsArray = [];\n  const str = fileObj.contents.toString();\n\n  // scan for MDN tags in the file content\n  const mdnTags = str.match( /\\{#mdn\\s*\".+?\"\\s*#\\}/g );\n\n  // if the file content contains any MDN tags construct mdnTagsArray\n  if ( mdnTags?.length ) {\n    for ( const marker of mdnTags ) {\n      // extract the name of the MDN component\n      const componentName = marker.replaceAll( ' ', '' ).replace( `${ MARKER_START }\"`, '' ).replace( `\"${ MARKER_END }`, '' );\n\n      // find the component properties in the files metadata\n      // `fileObj` should have a property that matches `componentName`\n      if ( fileObj?.[ componentName ] ) {\n        // add the marker to the MDNTags array\n        fileObj[ componentName ].marker = marker;\n\n        // push the component properties to mdnTagsArray\n        mdnTagsArray.push( fileObj[ componentName ] );\n      } else {\n        // Warning about missing component\n        debugFn?.( `Component named ${ componentName } could not be found` );\n      }\n    }\n  }\n  return mdnTagsArray;\n}\n\n/**\n * Render a nunjucks template\n * @param {string} template - Template name\n * @param {object} context - Template context\n * @returns {Promise<string>} Rendered template\n * @description\n *  Non-blocking rendering: Nunjucks template rendering is wrapped in Promises,\n *  allowing the plugin to continue processing other tags while waiting for templates\n *  to render.\n *  This is a helper function to avoid the callback function.\n */\nconst renderTemplate = ( template, context ) => {\n  return new Promise( ( resolve, reject ) => {\n    nunjucks.render( template, context, ( err, result ) => {\n      if ( err ) {\n        reject( err );\n      } else {\n        resolve( result );\n      }\n    } );\n  } );\n};\n\n/**\n * Process a single MDN component\n * @param {object} mdnTagObject - MDN tag configuration\n * @param {Function} debugFn - Debug function from metalsmith\n * @returns {Promise<string>} Rendered component\n * @description\n * Wrapper for the renderTemplate function. This function returns a promise that\n * resolves to the result of the renderTemplate function.\n */\nconst resolveMDNComponent = async ( mdnTagObject, debugFn ) => {\n  try {\n    return await renderTemplate( mdnTagObject.layout, { params: mdnTagObject } );\n  } catch ( err ) {\n    // Log error using debug function if available\n    debugFn?.( `Error rendering component ${ mdnTagObject.layout }: ${ err.message }` );\n    throw err;\n  }\n};\n\n/**\n * Process MDN components in Markdown files using Nunjucks templates.\n * Inspired by MDX - plugin to process nunjucks templates in markdown files.\n * MDN enables the use of Nunjucks in Markdown content. Nunjucks components can be\n * embedded within markdown content.\n *\n * @param {Options} options\n * @returns {import('metalsmith').Plugin}\n */\nfunction MDN( options ) {\n  options = normalizeOptions( options );\n\n  return async function MDN( files, metalsmith, done ) {\n    const debug = metalsmith.debug( 'metalsmith-mdn' );\n    debug( 'Running with options: %O', options );\n\n    try {\n      // Configure nunjucks environment\n      const env = nunjucks.configure( options.templatesDir, { autoescape: true } );\n\n      // Add custom filters\n      const customFilters = await import( path.join( metalsmith.directory(), options.customFilters ) );\n      Object.entries( customFilters ).forEach( ( [ name, filter ] ) => {\n        env.addFilter( name, filter );\n      } );\n\n      const debugFn = metalsmith.debug( 'metalsmith-mdn' );\n\n      // Collect all files and their MDN tags\n      const filesToProcess = Object.entries( files )\n        .map( ( [ filename, file ] ) => {\n          const MDNTags = getMDNTags( file, debugFn );\n          return MDNTags.length ? { filename, MDNTags } : null;\n        } )\n        .filter( Boolean );\n\n      /**\n       * Parallel file processing: All files containing MDN tags are processed concurrently using\n       * Promise.all(). E.g., multiple Markdown files with MDN tags, are all processed at the same\n       * time rather than sequentially.\n       */\n      const processedFiles = await Promise.all(\n        filesToProcess.map( async ( { filename, MDNTags } ) => {\n          // Process all MDN tags for this file in parallel\n          const resolvedTags = await Promise.all(\n            MDNTags.map( async ( mdnTagObject ) => {\n              /**\n               * Parallel tag resolution: Within each file, all MDN tags are resolved concurrently.\n               * E.g., If a single Markdown file contains multiple MDN tags (like {#mdn \"component1\"#}\n               * and {#mdn \"component2\"#}), they're rendered simultaneously.\n               */\n              const replacementString = await resolveMDNComponent( mdnTagObject, debugFn );\n              return {\n                marker: mdnTagObject.marker,\n                replacement: replacementString\n                  .trim()\n                  .replace( /\\n{3,}/g, '\\n\\n' )\n                  .replace( /^\\s+/gm, '' )\n                  .replace( /\\s+$/gm, '' )\n              };\n            } )\n          );\n\n          return { filename, resolvedTags };\n        } )\n      );\n\n      // Update all file contents\n      processedFiles.forEach( ( { filename, resolvedTags } ) => {\n        resolvedTags.forEach( ( { marker, replacement } ) => {\n          files[ filename ].contents = Buffer.from(\n            files[ filename ].contents.toString().replace( marker, replacement )\n          );\n        } );\n      } );\n\n      done();\n    } catch ( error ) {\n      done( error );\n    }\n  };\n}\n\nexport default MDN;\n"],"names":["MARKER_START","MARKER_END","defaults","templatesDir","customFilters","normalizeOptions","options","getMDNTags","fileObj","debugFn","mdnTagsArray","str","contents","toString","mdnTags","match","length","marker","componentName","replaceAll","replace","push","renderTemplate","template","context","Promise","resolve","reject","nunjucks","render","err","result","resolveMDNComponent","mdnTagObject","layout","params","message","MDN","files","metalsmith","done","debug","env","configure","autoescape","path","join","directory","Object","entries","forEach","name","filter","addFilter","filesToProcess","map","filename","file","MDNTags","Boolean","processedFiles","all","resolvedTags","replacementString","replacement","trim","Buffer","from","error"],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG,OAAO,CAAA;AAC5B,MAAMC,UAAU,GAAG,IAAI,CAAA;;AAEvB;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,YAAY,EAAE,SAAS;AACvBC,EAAAA,aAAa,EAAE,qBAAA;AACjB,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAKC,OAAO,IAAM;EACtC,OAAO;AAAE,IAAA,GAAGJ,QAAQ;IAAE,IAAKI,OAAO,IAAI,EAAE,CAAA;GAAI,CAAA;AAC9C,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAEC,OAAO,EAAEC,OAAO,EAAG;EACtC,MAAMC,YAAY,GAAG,EAAE,CAAA;EACvB,MAAMC,GAAG,GAAGH,OAAO,CAACI,QAAQ,CAACC,QAAQ,EAAE,CAAA;;AAEvC;AACA,EAAA,MAAMC,OAAO,GAAGH,GAAG,CAACI,KAAK,CAAE,uBAAwB,CAAC,CAAA;;AAEpD;AACA,EAAA,IAAKD,OAAO,IAAA,IAAA,IAAPA,OAAO,CAAEE,MAAM,EAAG;AACrB,IAAA,KAAM,MAAMC,MAAM,IAAIH,OAAO,EAAG;AAC9B;MACA,MAAMI,aAAa,GAAGD,MAAM,CAACE,UAAU,CAAE,GAAG,EAAE,EAAG,CAAC,CAACC,OAAO,CAAE,CAAIpB,EAAAA,YAAY,CAAI,CAAA,CAAA,EAAE,EAAG,CAAC,CAACoB,OAAO,CAAE,CAAA,CAAA,EAAKnB,UAAU,CAAA,CAAG,EAAE,EAAG,CAAC,CAAA;;AAExH;AACA;AACA,MAAA,IAAKO,OAAO,IAAPA,IAAAA,IAAAA,OAAO,CAAIU,aAAa,CAAE,EAAG;AAChC;AACAV,QAAAA,OAAO,CAAEU,aAAa,CAAE,CAACD,MAAM,GAAGA,MAAM,CAAA;;AAExC;AACAP,QAAAA,YAAY,CAACW,IAAI,CAAEb,OAAO,CAAEU,aAAa,CAAG,CAAC,CAAA;AAC/C,OAAC,MAAM;AACL;AACAT,QAAAA,OAAO,YAAPA,OAAO,CAAI,CAAoBS,gBAAAA,EAAAA,aAAa,qBAAuB,CAAC,CAAA;AACtE,OAAA;AACF,KAAA;AACF,GAAA;AACA,EAAA,OAAOR,YAAY,CAAA;AACrB,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMY,cAAc,GAAGA,CAAEC,QAAQ,EAAEC,OAAO,KAAM;AAC9C,EAAA,OAAO,IAAIC,OAAO,CAAE,CAAEC,OAAO,EAAEC,MAAM,KAAM;IACzCC,QAAQ,CAACC,MAAM,CAAEN,QAAQ,EAAEC,OAAO,EAAE,CAAEM,GAAG,EAAEC,MAAM,KAAM;AACrD,MAAA,IAAKD,GAAG,EAAG;QACTH,MAAM,CAAEG,GAAI,CAAC,CAAA;AACf,OAAC,MAAM;QACLJ,OAAO,CAAEK,MAAO,CAAC,CAAA;AACnB,OAAA;AACF,KAAE,CAAC,CAAA;AACL,GAAE,CAAC,CAAA;AACL,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,OAAQC,YAAY,EAAExB,OAAO,KAAM;EAC7D,IAAI;AACF,IAAA,OAAO,MAAMa,cAAc,CAAEW,YAAY,CAACC,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAEF,YAAAA;AAAa,KAAE,CAAC,CAAA;GAC7E,CAAC,OAAQH,GAAG,EAAG;AACd;AACArB,IAAAA,OAAO,IAAPA,IAAAA,IAAAA,OAAO,CAAI,CAAA,0BAAA,EAA8BwB,YAAY,CAACC,MAAM,CAAA,EAAA,EAAOJ,GAAG,CAACM,OAAO,CAAA,CAAI,CAAC,CAAA;AACnF,IAAA,MAAMN,GAAG,CAAA;AACX,GAAA;AACF,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,GAAGA,CAAE/B,OAAO,EAAG;AACtBA,EAAAA,OAAO,GAAGD,gBAAgB,CAAEC,OAAQ,CAAC,CAAA;EAErC,OAAO,eAAe+B,GAAGA,CAAEC,KAAK,EAAEC,UAAU,EAAEC,IAAI,EAAG;AACnD,IAAA,MAAMC,KAAK,GAAGF,UAAU,CAACE,KAAK,CAAE,gBAAiB,CAAC,CAAA;AAClDA,IAAAA,KAAK,CAAE,0BAA0B,EAAEnC,OAAQ,CAAC,CAAA;IAE5C,IAAI;AACF;MACA,MAAMoC,GAAG,GAAGd,QAAQ,CAACe,SAAS,CAAErC,OAAO,CAACH,YAAY,EAAE;AAAEyC,QAAAA,UAAU,EAAE,IAAA;AAAK,OAAE,CAAC,CAAA;;AAE5E;AACA,MAAA,MAAMxC,aAAa,GAAG,MAAM,OAAQyC,IAAI,CAACC,IAAI,CAAEP,UAAU,CAACQ,SAAS,EAAE,EAAEzC,OAAO,CAACF,aAAc,CAAE,CAAC,CAAA;AAChG4C,MAAAA,MAAM,CAACC,OAAO,CAAE7C,aAAc,CAAC,CAAC8C,OAAO,CAAE,CAAE,CAAEC,IAAI,EAAEC,MAAM,CAAE,KAAM;AAC/DV,QAAAA,GAAG,CAACW,SAAS,CAAEF,IAAI,EAAEC,MAAO,CAAC,CAAA;AAC/B,OAAE,CAAC,CAAA;AAEH,MAAA,MAAM3C,OAAO,GAAG8B,UAAU,CAACE,KAAK,CAAE,gBAAiB,CAAC,CAAA;;AAEpD;AACA,MAAA,MAAMa,cAAc,GAAGN,MAAM,CAACC,OAAO,CAAEX,KAAM,CAAC,CAC3CiB,GAAG,CAAE,CAAE,CAAEC,QAAQ,EAAEC,IAAI,CAAE,KAAM;AAC9B,QAAA,MAAMC,OAAO,GAAGnD,UAAU,CAAEkD,IAAI,EAAEhD,OAAQ,CAAC,CAAA;QAC3C,OAAOiD,OAAO,CAAC1C,MAAM,GAAG;UAAEwC,QAAQ;AAAEE,UAAAA,OAAAA;AAAQ,SAAC,GAAG,IAAI,CAAA;AACtD,OAAE,CAAC,CACFN,MAAM,CAAEO,OAAQ,CAAC,CAAA;;AAEpB;AACN;AACA;AACA;AACA;MACM,MAAMC,cAAc,GAAG,MAAMnC,OAAO,CAACoC,GAAG,CACtCP,cAAc,CAACC,GAAG,CAAE,OAAQ;QAAEC,QAAQ;AAAEE,QAAAA,OAAAA;AAAQ,OAAC,KAAM;AACrD;AACA,QAAA,MAAMI,YAAY,GAAG,MAAMrC,OAAO,CAACoC,GAAG,CACpCH,OAAO,CAACH,GAAG,CAAE,MAAQtB,YAAY,IAAM;AACrC;AACd;AACA;AACA;AACA;UACc,MAAM8B,iBAAiB,GAAG,MAAM/B,mBAAmB,CAAEC,YAAY,EAAExB,OAAQ,CAAC,CAAA;UAC5E,OAAO;YACLQ,MAAM,EAAEgB,YAAY,CAAChB,MAAM;YAC3B+C,WAAW,EAAED,iBAAiB,CAC3BE,IAAI,EAAE,CACN7C,OAAO,CAAE,SAAS,EAAE,MAAO,CAAC,CAC5BA,OAAO,CAAE,QAAQ,EAAE,EAAG,CAAC,CACvBA,OAAO,CAAE,QAAQ,EAAE,EAAG,CAAA;WAC1B,CAAA;AACH,SAAE,CACJ,CAAC,CAAA;QAED,OAAO;UAAEoC,QAAQ;AAAEM,UAAAA,YAAAA;SAAc,CAAA;AACnC,OAAE,CACJ,CAAC,CAAA;;AAED;MACAF,cAAc,CAACV,OAAO,CAAE,CAAE;QAAEM,QAAQ;AAAEM,QAAAA,YAAAA;AAAa,OAAC,KAAM;QACxDA,YAAY,CAACZ,OAAO,CAAE,CAAE;UAAEjC,MAAM;AAAE+C,UAAAA,WAAAA;AAAY,SAAC,KAAM;UACnD1B,KAAK,CAAEkB,QAAQ,CAAE,CAAC5C,QAAQ,GAAGsD,MAAM,CAACC,IAAI,CACtC7B,KAAK,CAAEkB,QAAQ,CAAE,CAAC5C,QAAQ,CAACC,QAAQ,EAAE,CAACO,OAAO,CAAEH,MAAM,EAAE+C,WAAY,CACrE,CAAC,CAAA;AACH,SAAE,CAAC,CAAA;AACL,OAAE,CAAC,CAAA;AAEHxB,MAAAA,IAAI,EAAE,CAAA;KACP,CAAC,OAAQ4B,KAAK,EAAG;MAChB5B,IAAI,CAAE4B,KAAM,CAAC,CAAA;AACf,KAAA;GACD,CAAA;AACH;;;;"}