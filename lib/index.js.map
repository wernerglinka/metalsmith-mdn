{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import path from 'path';\nimport nunjucks from 'nunjucks';\n\n/**\n * @typedef Options\n * @property {String} templatesDir - Directory containing nunjucks templates\n * @property {String} customFilters - Path to custom nunjucks filters file\n */\n\nconst MARKER_START = '{#mdn';\nconst MARKER_END = '#}';\n\n/** @type {Options} */\nconst defaults = {\n  templatesDir: 'layouts',\n  customFilters: 'nunjucks-filters.js'\n};\n\n/**\n * Normalize plugin options\n * @param {Options} [options]\n * @returns {Object}\n */\nconst normalizeOptions = (options) => {\n  return { ...defaults, ...(options || {}) };\n};\n\n/**\n * Extract MDN tags from file content\n * @param {object} fileObj - Metalsmith file object\n * @param {Function} debugFn - Debug function from metalsmith\n * @returns {Array} Array of MDN tag objects\n * @description\n *     Extracts all MDN tags from the file content to construct the mdnTagsArray.\n *     Get the name of the MDN component and find the component properties in the\n *     files frontmatter. Push the component properties to mdnTagsArray and when done\n *     return mdnTagsArray.\n */\nfunction getMDNTags(fileObj, debugFn) {\n  const mdnTagsArray = [];\n  const str = fileObj.contents.toString();\n\n  // scan for MDN tags in the file content\n  const mdnTags = str.match(/\\{#mdn\\s*\".+?\"\\s*#\\}/g);\n\n  // if the file content contains any MDN tags construct mdnTagsArray\n  if (mdnTags?.length) {\n    for (const marker of mdnTags) {\n      // extract the name of the MDN component\n      const componentName = marker.replaceAll(' ', '').replace(`${MARKER_START}\"`, '').replace(`\"${MARKER_END}`, '');\n\n      // find the component properties in the files metadata\n      // `fileObj` should have a property that matches `componentName`\n      if (fileObj?.[componentName]) {\n        // add the marker to the MDNTags array\n        fileObj[componentName].marker = marker;\n\n        // push the component properties to mdnTagsArray\n        mdnTagsArray.push(fileObj[componentName]);\n      } else {\n        // Warning about missing component\n        debugFn?.(`Component named ${componentName} could not be found`);\n      }\n    }\n  }\n  return mdnTagsArray;\n}\n\n/**\n * Render a nunjucks template\n * @param {string} template - Template name\n * @param {object} context - Template context\n * @returns {Promise<string>} Rendered template\n * @description\n *  Non-blocking rendering: Nunjucks template rendering is wrapped in Promises,\n *  allowing the plugin to continue processing other tags while waiting for templates\n *  to render.\n *  This is a helper function to avoid the callback function.\n */\nconst renderTemplate = (template, context) => {\n  return new Promise((resolve, reject) => {\n    nunjucks.render(template, context, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\n/**\n * Process a single MDN component\n * @param {object} mdnTagObject - MDN tag configuration\n * @param {Function} debugFn - Debug function from metalsmith\n * @returns {Promise<string>} Rendered component\n * @description\n * Wrapper for the renderTemplate function. This function returns a promise that\n * resolves to the result of the renderTemplate function.\n */\nconst resolveMDNComponent = async (mdnTagObject, debugFn) => {\n  try {\n    return await renderTemplate(mdnTagObject.layout, { params: mdnTagObject });\n  } catch (err) {\n    // Log error using debug function if available\n    debugFn?.(`Error rendering component ${mdnTagObject.layout}: ${err.message}`);\n    throw err;\n  }\n};\n\n/**\n * Process MDN components in Markdown files using Nunjucks templates.\n * Inspired by MDX - plugin to process nunjucks templates in markdown files.\n * MDN enables the use of Nunjucks in Markdown content. Nunjucks components can be\n * embedded within markdown content.\n *\n * @param {Options} options\n * @returns {import('metalsmith').Plugin}\n */\nfunction MDN(options) {\n  options = normalizeOptions(options);\n\n  return async function MDN(files, metalsmith, done) {\n    const debug = metalsmith.debug('metalsmith-mdn');\n    debug('Running with options: %O', options);\n\n    try {\n      // Configure nunjucks environment\n      const env = nunjucks.configure(options.templatesDir, { autoescape: true });\n\n      // Add custom filters\n      const customFilters = await import(path.join(metalsmith.directory(), options.customFilters));\n      Object.entries(customFilters).forEach(([name, filter]) => {\n        env.addFilter(name, filter);\n      });\n\n      const debugFn = metalsmith.debug('metalsmith-mdn');\n\n      // Collect all files and their MDN tags\n      const filesToProcess = Object.entries(files)\n        .map(([filename, file]) => {\n          const MDNTags = getMDNTags(file, debugFn);\n          return MDNTags.length ? { filename, MDNTags } : null;\n        })\n        .filter(Boolean);\n\n      /**\n       * Parallel file processing: All files containing MDN tags are processed concurrently using\n       * Promise.all(). E.g., multiple Markdown files with MDN tags, are all processed at the same\n       * time rather than sequentially.\n       */\n      const processedFiles = await Promise.all(\n        filesToProcess.map(async ({ filename, MDNTags }) => {\n          // Process all MDN tags for this file in parallel\n          const resolvedTags = await Promise.all(\n            MDNTags.map(async (mdnTagObject) => {\n              /**\n               * Parallel tag resolution: Within each file, all MDN tags are resolved concurrently.\n               * E.g., If a single Markdown file contains multiple MDN tags (like {#mdn \"component1\"#}\n               * and {#mdn \"component2\"#}), they're rendered simultaneously.\n               */\n              const replacementString = await resolveMDNComponent(mdnTagObject, debugFn);\n              return {\n                marker: mdnTagObject.marker,\n                replacement: replacementString\n                  .trim()\n                  .replace(/\\n{3,}/g, '\\n\\n')\n                  .replace(/^\\s+/gm, '')\n                  .replace(/\\s+$/gm, '')\n              };\n            })\n          );\n\n          return { filename, resolvedTags };\n        })\n      );\n\n      // Update all file contents\n      processedFiles.forEach(({ filename, resolvedTags }) => {\n        resolvedTags.forEach(({ marker, replacement }) => {\n          files[filename].contents = Buffer.from(files[filename].contents.toString().replace(marker, replacement));\n        });\n      });\n\n      done();\n    } catch (error) {\n      done(error);\n    }\n  };\n}\n\nexport default MDN;\n"],"names":["MARKER_START","MARKER_END","defaults","templatesDir","customFilters","normalizeOptions","options","getMDNTags","fileObj","debugFn","mdnTagsArray","str","contents","toString","mdnTags","match","length","marker","componentName","replaceAll","replace","push","renderTemplate","template","context","Promise","resolve","reject","nunjucks","render","err","result","resolveMDNComponent","mdnTagObject","layout","params","message","MDN","files","metalsmith","done","debug","env","configure","autoescape","path","join","directory","Object","entries","forEach","name","filter","addFilter","filesToProcess","map","filename","file","MDNTags","Boolean","processedFiles","all","resolvedTags","replacementString","replacement","trim","Buffer","from","error"],"mappings":"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"}